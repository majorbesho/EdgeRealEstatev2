
@{
    ViewBag.Title = "MasterDetails";
    Layout = "~/Views/Shared/_AdminPage.cshtml";
}

<h2>MasterDetails</h2>




<div id="example">
    <div id="grid"></div>

    <script>

        $(document).ready(function () {
            var dataSource = new kendo.data.DataSource({
                pageSize: 20,
                data: products,
                autoSync: true,
                schema: {
                    model: {
                        id: "ProductID",
                        fields: {
                            ProductID: { editable: false, nullable: true },
                            ProductName: { validation: { required: true } },
                            Category: { defaultValue: { CategoryID: 1, CategoryName: "Beverages" } },
                            UnitPrice: { type: "number", validation: { required: true, min: 1 } }
                        }
                    }
                }
            });

            $("#grid").kendoGrid({
                dataSource: dataSource,
                pageable: true,
                height: 550,
                toolbar: ["create"],
                columns: [
                    { field: "ProductName", title: "Product Name" },
                    { field: "Category", title: "Category", width: "180px", editor: categoryDropDownEditor, template: "#=Category.CategoryName#" },
                    { field: "UnitPrice", title: "Unit Price", format: "{0:c}", width: "130px" },
                    { command: "destroy", title: " ", width: "150px" }],
                editable: true
            });
        });

        function categoryDropDownEditor(container, options) {
            $('<input required name="' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: false,
                    dataTextField: "CategoryName",
                    dataValueField: "CategoryID",
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "https://demos.telerik.com/kendo-ui/service/Northwind.svc/Categories"
                        }
                    }
                });
        }

    </script>
</div>











@*@(Html.Kendo().Grid<EdgeRealEstate.Models.ViewModels.StageVM>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Ename);
        columns.Bound(p => p.Aname);
        columns.Bound(p => p.code);
        columns.Bound(p => p.lastCost);
        columns.Bound(p => p.nots);
        columns.Bound(p => p.IsHaveItem);
        columns.Bound(p => p.BeginDateAcutely).ClientTemplate("#= kendo.toString(BeginDateAcutely, \"yyyy/MM/dd\") #");
        columns.Bound(p => p.EndDateAcutely).ClientTemplate("#= kendo.toString(EndDateAcutely, \"yyyy/MM/dd\") #");
        //columns.Bound(p => p.Main).ClientTemplate("#=Main.Name#").Sortable(false).Width(150);

        columns.ForeignKey(p => p.MainItemID, (System.Collections.IEnumerable)ViewData["categories"], "ID", "Name")
            .Title("Main Item").Width(200);

        columns.Command(command => command.Destroy()).Width(150);
    })
    .ToolBar(toolBar =>
    {
        toolBar.Create();
        toolBar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Events(events => events.Error("error_handler"))
        .Model(model =>
        {
            //model.Id(p => p.id);
            //model.Field(p => p.id).Editable(false);
            //model.Field(p => p.id).DefaultValue(1);

            model.Id(p => p.id);
            model.Field(p => p.id).Editable(false);
            //model.Field(p => p.Main).DefaultValue(
            //    ViewData["defaultCategory"] as EdgeRealEstate.Models.ViewModels.MainItemViewModel);
        })
        .PageSize(20)
        .Read(read => read.Action("EditingCustom_Read", "Stages"))
        .Create(create => create.Action("EditingCustom_Create", "Stages"))
        .Update(update => update.Action("EditingCustom_Update", "Stages"))
        .Destroy(destroy => destroy.Action("EditingCustom_Destroy", "Stages"))
    )
)

<script type="text/javascript">
    function error_handler(e) {    
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });        
            alert(message);
        }
    }
</script>*@


