@model EdgeRealEstate.Entities.Flat

@{
    ViewBag.Title = "Edit";
    ViewBag.current = "Flats";
    Layout = "~/Views/Shared/_AdminPage.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Flat</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)
        @Html.HiddenFor(model => model.ImgUrl)
    <div class="form-row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.Aname, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.Aname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Aname, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.Ename, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.Ename, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Ename, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.code, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.code, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.code, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.FlotSize, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.FlotSize, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FlotSize, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.BeginDateAcutely, htmlAttributes: new { @class = "control-label " })
            @(Html.Kendo().DatePicker()
            .Name("BeginDateAcutely")
            .Value(DateTime.Now)
            .Format("yyyy/MM/dd")
            .HtmlAttributes(new { @class = "form-control" })
            )
            @Html.ValidationMessageFor(model => model.BeginDateAcutely, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.BeginDateExpected, htmlAttributes: new { @class = "control-label " })
            @(Html.Kendo().DatePicker()
            .Name("BeginDateExpected")
            .Value(DateTime.Now)
            .Format("yyyy/MM/dd")
            .HtmlAttributes(new { @class = "form-control" })
            )
            @Html.ValidationMessageFor(model => model.BeginDateExpected, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.EndDateAcutely, htmlAttributes: new { @class = "control-label " })
            @(Html.Kendo().DatePicker()
            .Name("EndDateAcutely")
            .Value(DateTime.Now)
            .Format("yyyy/MM/dd")
            .HtmlAttributes(new { @class = "form-control" })
            )
            @Html.ValidationMessageFor(model => model.EndDateAcutely, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.EndDateExpected, htmlAttributes: new { @class = "control-label " })
            @(Html.Kendo().DatePicker()
            .Name("EndDateExpected")
            .Value(DateTime.Now)
            .Format("yyyy/MM/dd")
            .HtmlAttributes(new { @class = "form-control" })
            )
            @Html.ValidationMessageFor(model => model.EndDateExpected, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.ImgUrl, htmlAttributes: new { @class = "control-label " })
            @*@Html.EditorFor(model => model.Project.ImgURL, new { htmlAttributes = new { @class = "form-control" } })*@
            @(Html.Kendo().Upload()
            .Name("Image")
            .HtmlAttributes(new { aria_label = "Image" })
            .Multiple(false)
            .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))
            )
            <div class="demo-hint">You can only upload <strong>GIF</strong>, <strong>JPG</strong>, <strong>PNG</strong> files.</div>
            @Html.ValidationMessageFor(model => model.ImgUrl, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.AttachedId, htmlAttributes: new { @class = "control-label " })
            @*@Html.EditorFor(model => model.Project.attachedFileAndPic, new { htmlAttributes = new { @class = "form-control" } })*@
            @(Html.Kendo().Upload()
            .Name("Files")
            .HtmlAttributes(new { aria_label = "Files" })
            .Multiple(true)
            //.Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))
            )
            @Html.ValidationMessageFor(model => model.AttachedId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.ProjectsId, htmlAttributes: new { @class = "control-label " })
            @Html.DropDownListFor(model => model.ProjectsId, (IEnumerable<SelectListItem>)ViewBag.Projects, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProjectsId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.DegreeOfExcellenceId, htmlAttributes: new { @class = "control-label " })
            @Html.DropDownListFor(model => model.DegreeOfExcellenceId, (IEnumerable<SelectListItem>)ViewBag.DegreeOfExcellence, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DegreeOfExcellenceId, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.BuildingId, htmlAttributes: new { @class = "control-label " })
            @Html.DropDownListFor(model => model.BuildingId, (IEnumerable<SelectListItem>)ViewBag.Buildings, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.BuildingId, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.FlatTypeId, htmlAttributes: new { @class = "control-label " })
            @Html.DropDownListFor(model => model.FlatTypeId, (IEnumerable<SelectListItem>)ViewBag.FlatType, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.FlatTypeId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.Level, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.BedroomNo, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.BedroomNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BedroomNo, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.resptionNo, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.resptionNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.resptionNo, "", new { @class = "text-danger" })
        </div>

        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.Nots, htmlAttributes: new { @class = "control-label " })
            @Html.EditorFor(model => model.Nots, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nots, "", new { @class = "text-danger" })
        </div>

    </div>

        <div class="form-group">
            <div class="col-md-12">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div class="col-md-12">

    @Html.ActionLink("Back to List", "Index")
</div>
